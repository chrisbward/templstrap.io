// Code generated by MockGen. DO NOT EDIT.
// Source: ./validationcontroller.go
//
// Generated by this command:
//
//	mockgen -package mock_validationcontroller -destination=./mocks/mock_validationcontroller.go -source=./validationcontroller.go -typed
//
// Package mock_validationcontroller is a generated GoMock package.
package mock_validationcontroller

import (
	reflect "reflect"

	entities "github.com/chrisbward/templstrap.io/testsuite/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIValidationController is a mock of IValidationController interface.
type MockIValidationController struct {
	ctrl     *gomock.Controller
	recorder *MockIValidationControllerMockRecorder
}

// MockIValidationControllerMockRecorder is the mock recorder for MockIValidationController.
type MockIValidationControllerMockRecorder struct {
	mock *MockIValidationController
}

// NewMockIValidationController creates a new mock instance.
func NewMockIValidationController(ctrl *gomock.Controller) *MockIValidationController {
	mock := &MockIValidationController{ctrl: ctrl}
	mock.recorder = &MockIValidationControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIValidationController) EXPECT() *MockIValidationControllerMockRecorder {
	return m.recorder
}

// DoValidation mocks base method.
func (m *MockIValidationController) DoValidation() (bool, []entities.FormField) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoValidation")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]entities.FormField)
	return ret0, ret1
}

// DoValidation indicates an expected call of DoValidation.
func (mr *MockIValidationControllerMockRecorder) DoValidation() *IValidationControllerDoValidationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoValidation", reflect.TypeOf((*MockIValidationController)(nil).DoValidation))
	return &IValidationControllerDoValidationCall{Call: call}
}

// IValidationControllerDoValidationCall wrap *gomock.Call
type IValidationControllerDoValidationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IValidationControllerDoValidationCall) Return(validationPassed bool, fieldValidators []entities.FormField) *IValidationControllerDoValidationCall {
	c.Call = c.Call.Return(validationPassed, fieldValidators)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IValidationControllerDoValidationCall) Do(f func() (bool, []entities.FormField)) *IValidationControllerDoValidationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IValidationControllerDoValidationCall) DoAndReturn(f func() (bool, []entities.FormField)) *IValidationControllerDoValidationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateFields mocks base method.
func (m *MockIValidationController) InvalidateFields() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvalidateFields")
}

// InvalidateFields indicates an expected call of InvalidateFields.
func (mr *MockIValidationControllerMockRecorder) InvalidateFields() *IValidationControllerInvalidateFieldsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateFields", reflect.TypeOf((*MockIValidationController)(nil).InvalidateFields))
	return &IValidationControllerInvalidateFieldsCall{Call: call}
}

// IValidationControllerInvalidateFieldsCall wrap *gomock.Call
type IValidationControllerInvalidateFieldsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *IValidationControllerInvalidateFieldsCall) Return() *IValidationControllerInvalidateFieldsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *IValidationControllerInvalidateFieldsCall) Do(f func()) *IValidationControllerInvalidateFieldsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *IValidationControllerInvalidateFieldsCall) DoAndReturn(f func()) *IValidationControllerInvalidateFieldsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
