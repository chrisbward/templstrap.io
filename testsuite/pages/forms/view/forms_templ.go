// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.747
package forms

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/chrisbward/templstrap.io/testsuite/entities"

	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/base/head"
	"github.com/chrisbward/templstrap.io/pkg/forms/form"
	"github.com/chrisbward/templstrap.io/pkg/forms/formfield"
	"github.com/chrisbward/templstrap.io/pkg/forms/formlabel"
	"github.com/chrisbward/templstrap.io/pkg/forms/formtip"
	"github.com/chrisbward/templstrap.io/pkg/forms/inputfield"
	"github.com/chrisbward/templstrap.io/pkg/forms/range"
	"github.com/chrisbward/templstrap.io/pkg/forms/select"
	"github.com/chrisbward/templstrap.io/pkg/forms/select/selectoption"
	"github.com/chrisbward/templstrap.io/testsuite/components/templates/default"
	"net/http"
	// "github.com/chrisbward/templstrap.io/pkg/forms/inputgroup"
	"github.com/chrisbward/templstrap.io/pkg/components/card"
	"github.com/chrisbward/templstrap.io/pkg/forms/inputgrouptext"
)

func Head() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<link href=\"https://getbootstrap.com/docs/5.3/assets/css/docs.css\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = head.Show(head.HeadProps{
			Title: "TemplStrap.io",
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Show(props entities.IPageProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var4 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Var5 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
				templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
				if !templ_7745c5c3_IsBuffer {
					defer func() {
						templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err == nil {
							templ_7745c5c3_Err = templ_7745c5c3_BufErr
						}
					}()
				}
				ctx = templ.InitializeContext(ctx)
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>An example form</p>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var6 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
					templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
					if !templ_7745c5c3_IsBuffer {
						defer func() {
							templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
							if templ_7745c5c3_Err == nil {
								templ_7745c5c3_Err = templ_7745c5c3_BufErr
							}
						}()
					}
					ctx = templ.InitializeContext(ctx)
					templ_7745c5c3_Var7 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
						templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
						templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
						if !templ_7745c5c3_IsBuffer {
							defer func() {
								templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
								if templ_7745c5c3_Err == nil {
									templ_7745c5c3_Err = templ_7745c5c3_BufErr
								}
							}()
						}
						ctx = templ.InitializeContext(ctx)
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							FloatingLabels: true,
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbUsername",
								Text: "Your username",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbUsername",
									},
								},
								Placeholder: "Enter your username",
								Type: entities.FormFieldType{
									InputType: entities.TextType,
								},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbVanityURL",
								Text: "Your vanity URL",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbVanityURL",
									},
								},
								Placeholder: "example-url",
								Type: entities.FormFieldType{
									InputType: entities.TextType,
								},
							}),
							InputGroup: formfield.InputGroup{
								InputGroup: inputgrouptext.Show(
									inputgrouptext.InputGroupTextProps{
										Text: "https://example.com/users/",
									},
								),
								Placement: formfield.PlacementBefore,
							},
							FormTip: formtip.Show(formtip.FormTipProps{
								Text: "Build a URL that others can visit",
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							FloatingLabels: true,
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbEmail",
								Text: "Your email",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbEmail",
									},
								},
								Placeholder: "Enter your email",
								Type: entities.FormFieldType{
									InputType: entities.EmailType,
								},
							}),
							InputGroup: formfield.InputGroup{
								InputGroup: inputgrouptext.Show(
									inputgrouptext.InputGroupTextProps{
										Text: "@",
									},
								),
								Placement: formfield.PlacementBefore,
							},
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbOtherEmail",
								Text: "Your other email",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbOtherEmail",
									},
								},
								Placeholder: "Enter your other email",
								Type: entities.FormFieldType{
									InputType: entities.EmailType,
								},
							}),
							InputGroup: formfield.InputGroup{
								InputGroup: inputgrouptext.Show(
									inputgrouptext.InputGroupTextProps{
										Text: "@",
									},
								),
								Placement: formfield.PlacementBefore,
							},
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							FloatingLabels: true,
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbPassword",
								Text: "Your password",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbPassword",
									},
								},
								Type: entities.FormFieldType{
									InputType: entities.PasswordType,
								},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbPassword",
								Text: "Your password",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbPassword",
									},
								},
								Type: entities.FormFieldType{
									InputType: entities.PasswordType,
								},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbPickColor",
								Text: "Pick a colour",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbPickColor",
									},
								},
								Type: entities.FormFieldType{
									InputType: entities.ColorType,
								},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "txbDatalist",
								Text: "Enter an item",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "txbDatalist",
									},
								},
								Type: entities.FormFieldType{
									InputType: entities.DatalistType,
								},
								DatalistItems: []string{"chris", "squeak", "steve"},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "ddSelectAnItem",
								Text: "Select an item",
							}),
							Field: selectx.Show(selectx.SelectProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "ddSelectAnItem",
									},
								},
								Options: []*selectoption.SelectOptionProps{
									{Label: "item", Value: "itemval"},
									{Label: "item2", Value: "itemval2"},
									{Label: "item3", Value: "itemval3"},
								},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "fuFileUpload",
								Text: "Upload a file",
							}),
							Field: inputfield.Show(inputfield.InputProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "fuFileUpload",
									},
								},
								Type: entities.FormFieldType{
									InputType: entities.FileType,
								},
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
							FormElementProps: base.FormElementProps{
								ElementProps: base.ElementProps{
									AdditionalClasses: []string{"mb-3"},
								},
							},
							Label: formlabel.Show(formlabel.FormLabelProps{
								For:  "rngRangePicker",
								Text: "How much awesome?",
							}),
							Field: rangeeelement.Show(rangeeelement.RangeProps{
								FormElementProps: base.FormElementProps{
									ElementProps: base.ElementProps{
										Id: "rngRangePicker",
									},
								},
								Min:  0,
								Max:  10,
								Step: 0.5,
							}),
						}).Render(ctx, templ_7745c5c3_Buffer)
						if templ_7745c5c3_Err != nil {
							return templ_7745c5c3_Err
						}
						return templ_7745c5c3_Err
					})
					templ_7745c5c3_Err = form.Show(form.FormProps{
						Action: form.FormAction{
							Method: http.MethodPost,
							Action: "https://google.com",
							Actions: form.FormActionsMap{
								form.PrimaryFormAction:   {Name: "Submit"},
								form.SecondaryFormAction: {Name: "Cancel"},
							},
						},
						FloatingLabels: true,
					}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					return templ_7745c5c3_Err
				})
				templ_7745c5c3_Err = card.Show(card.CardProps{
					ElementProps: base.ElementProps{
						AdditionalClasses: []string{"mb-6"},
					},
					Title: card.CardTitle{
						Text: "Example Form",
						ElementProps: base.ElementProps{
							AdditionalClasses: []string{"mb-4"},
						},
					},
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				return templ_7745c5c3_Err
			})
			templ_7745c5c3_Err = defaulttemplate.Show(defaulttemplate.DefaultTemplateProps{
				ComponentsNavItems: props.GetNavItems("Forms"),
				BreadCrumbItems:    props.GetBreadcrumbs(),
			}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var5), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = base.Show(base.BaseProps{
			Title:         "",
			HeadComponent: Head(),
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var4), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
