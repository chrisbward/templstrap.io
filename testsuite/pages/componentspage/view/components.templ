package componentspage

import (
	"fmt"
	"strings"
	"github.com/chrisbward/templstrap.io/testsuite/entities"

	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/base/head"
	"github.com/chrisbward/templstrap.io/testsuite/components/templates/default"

	"github.com/chrisbward/templstrap.io/pkg/content/typography/heading"

	"github.com/chrisbward/templstrap.io/testsuite/components/example"

	/* components below */
	"github.com/chrisbward/templstrap.io/testsuite/components/example/accordion"

	"github.com/chrisbward/templstrap.io/pkg/components/alerts"

	"github.com/chrisbward/templstrap.io/pkg/components/badge"

	"github.com/chrisbward/templstrap.io/pkg/components/breadcrumb"

	"github.com/chrisbward/templstrap.io/pkg/components/buttons"
	"github.com/chrisbward/templstrap.io/pkg/components/buttongroup"
	"github.com/chrisbward/templstrap.io/pkg/components/buttontoolbar"

	"github.com/chrisbward/templstrap.io/pkg/components/card"

	"github.com/chrisbward/templstrap.io/pkg/components/carousel"

	"github.com/chrisbward/templstrap.io/pkg/components/closebutton"

	"github.com/chrisbward/templstrap.io/pkg/components/collapse"

	"github.com/chrisbward/templstrap.io/pkg/components/dropdowns"

	"github.com/chrisbward/templstrap.io/pkg/components/listgroup"

	"github.com/chrisbward/templstrap.io/pkg/components/modal"

	"github.com/chrisbward/templstrap.io/pkg/components/navbar"
	"github.com/chrisbward/templstrap.io/pkg/components/navbar/navitem"

	"github.com/chrisbward/templstrap.io/pkg/components/navsandtabs"

	"github.com/chrisbward/templstrap.io/pkg/components/offcanvas"

	"github.com/chrisbward/templstrap.io/pkg/components/pagination"

	"github.com/chrisbward/templstrap.io/pkg/components/placeholders"

	"github.com/chrisbward/templstrap.io/pkg/components/popovers"

	"github.com/chrisbward/templstrap.io/pkg/components/progress"

	"github.com/chrisbward/templstrap.io/pkg/components/scrollspy"

	"github.com/chrisbward/templstrap.io/pkg/components/spinners"

	"github.com/chrisbward/templstrap.io/pkg/components/toasts"

	"github.com/chrisbward/templstrap.io/pkg/components/tooltips"
	"github.com/chrisbward/templstrap.io/pkg/components/carousel/carouselitem"
)

templ Head() {
	@head.Show(head.HeadProps{
        Title: "TemplStrap.io",
    }) {
		<link href="https://getbootstrap.com/docs/5.3/assets/css/docs.css"/>
	}
}

type PageProps struct {
	Title                     string
	ComponentsNavItems        []navitem.NavItemProps
	ComponentsNavItemsSidebar []navitem.NavItemProps
}

var scrollSpyId = "scrollSpyNavigation"

var components = []string{
	"accordion",
	"alerts",
	"badge",
	"breadcrumb",
	"card",
}

func (pp PageProps) GetComponentLinksForMainNavigation() (items []navitem.NavItemProps) {

	for _, componentName := range components {
		pp.ComponentsNavItems = append(pp.ComponentsNavItems, navitem.NavItemProps{
			Name: componentName,
			Link: fmt.Sprintf("/components/%s", componentName),
		})
	}
	items = pp.ComponentsNavItems
	return

}

func (pp PageProps) GetComponentLinksForSidebarNavigation() (items []navitem.NavItemProps) {

	for _, componentName := range components {
		pp.ComponentsNavItemsSidebar = append(pp.ComponentsNavItemsSidebar, navitem.NavItemProps{
			Name: componentName,
			Link: fmt.Sprintf("#%sComponent", componentName),
		})
	}
	items = pp.ComponentsNavItemsSidebar
	return

}

templ Show(props entities.IPageProps) {
	@base.Show(base.BaseProps{
        Title: "",
        HeadComponent: Head(),
    }) {
		@base.Show(base.BaseProps{
        Title: "",
        HeadComponent: Head(),
    }) {
			@defaulttemplate.Show(defaulttemplate.DefaultTemplateProps{
			ComponentsNavItems: props.GetNavItems("Components"),
			BreadCrumbItems: props.GetBreadcrumbs(),
		}) {
				@heading.Show(heading.HeadingProps{ }) {
					{ props.GetTitle() }
				}
				<p>This is the components page</p>
				<section id="accordionComponent">
					<h2>Accordion</h2>
					@accordionexample.Show()
				</section>
				<section id="alertsComponent">
					<h2>Alerts</h2>
					@example.Show(example.ExampleProps{
                        Title: "Alerts",
                    }) {
						@alerts.Show(alerts.AlertProps{
                                AlertType: alerts.PrimaryAlert,
                            }) {
							This is a primary alert.
						}
						@alerts.Show(alerts.AlertProps{
                                AlertType: alerts.SecondaryAlert,
                            }) {
							This is a secondary alert.
						}
						@alerts.Show(alerts.AlertProps{
                                AlertType: alerts.SuccessAlert,
                            }) {
							This is a success alert.
						}
						@alerts.Show(alerts.AlertProps{
                                AlertType: alerts.DangerAlert,
                            }) {
							This is a danger alert.
						}
						@alerts.Show(alerts.AlertProps{
                                AlertType: alerts.WarningAlert,
                            }) {
							This is a warning alert.
						}
						@alerts.Show(alerts.AlertProps{
                                AlertType: alerts.InfoAlert,
                            }) {
							This is an info alert.
						}
					}
				</section>
				<h2>Badge</h2>
				@example.Show(example.ExampleProps{
                    Title: "Badge",
                }) {
					@badge.Show()
				}
				<h2>Breadcrumb</h2>
				@example.Show(example.ExampleProps{
                    Title: "Breadcrumb",
                }) {
					@breadcrumb.Show(breadcrumb.BreadcrumbProps{})
				}
				<h2>Buttons</h2>
				@example.Show(example.ExampleProps{
                    Title: "Buttons",
                }) {
					@buttons.Show(buttons.ButtonProps{
                        ButtonClassType: buttons.PrimaryButton,
                    }) {
						Button
					}
					@buttons.Show(buttons.ButtonProps{
                        ButtonClassType: buttons.PrimaryButton,
                        IsDisabled: true,
                    }) {
						Disabled Button
					}
				}
				<h2>Button Group</h2>
				@buttongroup.Show(buttongroup.ButtonGroupProps{ 
                    }) {
					@buttons.Show(buttons.ButtonProps{
                        ButtonClassType: buttons.PrimaryButton,
                    }) {
						Button
					}
					@buttons.Show(buttons.ButtonProps{
                        ButtonClassType: buttons.PrimaryButton,
                    }) {
						Button
					}
					@buttons.Show(buttons.ButtonProps{
                        ButtonClassType: buttons.PrimaryButton,
                    }) {
						Button
					}
				}
				@buttontoolbar.Show() {
					@buttongroup.Show(buttongroup.ButtonGroupProps{
                        ElementProps: base.ElementProps{
                            AdditionalClasses: strings.Split("me-2", " "),
                        },
                    }) {
						@buttons.Show(buttons.ButtonProps{
                            ButtonClassType: buttons.PrimaryButton,
                        }) {
							Button
						}
						@buttons.Show(buttons.ButtonProps{
                            ButtonClassType: buttons.PrimaryButton,
                        }) {
							Button
						}
						@buttons.Show(buttons.ButtonProps{
                            ButtonClassType: buttons.PrimaryButton,
                        }) {
							Button
						}
					}
					@buttongroup.Show(buttongroup.ButtonGroupProps{
                        ElementProps: base.ElementProps{
                            AdditionalClasses: strings.Split("me-2", " "),
                        },
                    }) {
						@buttons.Show(buttons.ButtonProps{
                            ButtonClassType: buttons.PrimaryButton,
                        })
						@buttons.Show(buttons.ButtonProps{
                            ButtonClassType: buttons.PrimaryButton,
                        })
						@buttons.Show(buttons.ButtonProps{
                            ButtonClassType: buttons.PrimaryButton,
                        })
					}
				}
				<h2>Card</h2>
				@example.Show(example.ExampleProps{
                    Title: "Card",
                }) {
					@card.Show(card.CardProps{
                        Title: card.CardTitle{
							Text: "Test",
						}, 
                    })
				}
				<h2>Carousel</h2>
				@carousel.Show(carousel.CarouselProps{
						HasControls: true, 
						ElementProps: base.ElementProps{
							Id: "myCarousel",
						},
					}) {
					@carouselitem.Show(carouselitem.CarouselItemProps{
							IsActive: true,
						}) {
						<p>item1</p>
					}
					@carouselitem.Show(carouselitem.CarouselItemProps{
						}) {
						<p>item2</p>
					}
					@carouselitem.Show(carouselitem.CarouselItemProps{
						}) {
						<p>item3</p>
					}
				}
				<h2>Close Button</h2>
				@closebutton.Show()
				<h2>Collapse</h2>
				@collapse.Show()
				<h2>Dropdowns</h2>
				@dropdowns.Show()
				<h2>List Group</h2>
				@listgroup.Show()
				<h2>Modal</h2>
				@modal.Show()
				<h2>Navbar</h2>
				@navbar.Show(navbar.NavbarProps{})
				<h2>Navs &amp; Tabs</h2>
				@navsandtabs.Show()
				<h2>Offcanvas</h2>
				@offcanvas.Show()
				<h2>Pagination</h2>
				@pagination.Show()
				<h2>Placeholders</h2>
				@placeholders.Show()
				<h2>Popovers</h2>
				@popovers.Show()
				<h2>Progress</h2>
				@progress.Show(progress.ProgressProps{
                        Percentage: 40,
                    })
				<h2>Scrollspy</h2>
				@scrollspy.Show(scrollspy.ScrollspyProps{
                        ElementProps: base.ElementProps{
                            Id: "",
                        },
                    })
				<h2>Spinners</h2>
				@spinners.Show(spinners.SpinnerProps{})
				<h2>Toasts</h2>
				@toasts.Show()
				<h2>Tooltips</h2>
				@tooltips.Show()
				// @scrollspy.Show(scrollspy.ScrollspyProps{
				//     ElementProps: base.ElementProps{
				//         Id: scrollSpyId,
				//     },
				// }) {
				// 	@navbar.Show(navbar.NavbarProps{
				//         ElementProps: base.ElementProps{
				//             Id: scrollSpyId,
				//         },
				//         Placement: navbar.StickyTop,
				//         Direction: navbar.Vertical,
				//         NavItems: props.GetComponentLinksForSidebarNavigation(),
				//     })
				// }
			}
		}
	}
}
