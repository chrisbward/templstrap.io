// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.648
package accordionexample

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/components/accordion"
	"github.com/chrisbward/templstrap.io/pkg/components/accordion/accordionitem"
	"github.com/chrisbward/templstrap.io/testsuite/components/example"
)

func ImportCode() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(`
    import(
        "github.com/chrisbward/templstrap.io/pkg/components/accordion"
        "github.com/chrisbward/templstrap.io/pkg/components/accordion/accordionitem"
    )`)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `testsuite/components/example/accordion/accordion.templ`, Line: 16, Col: 6}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Code() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(` 
    @accordion.Show(accordion.AccordionProps{
        ElementProps: base.ElementProps{
            Id: "ExampleAccordion",
        },
        IsFlush: false,
    }) {
        @accordionitem.Show(accordionitem.AccordionItemProps{
            ElementProps: base.ElementProps{
                Id: "collapseOne",
            },
            Title: "Accordion Item #1",
            ParentIdSelector: "#ExampleAccordion",
        }) {
            <strong>This is the first item's accordion body.</strong>
            It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. 
            These classes control the overall appearance, as well as the showing and hiding via CSS transitions. 
            You can modify any of this with custom CSS or overriding our default variables. 
            It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, 
            though the transition does limit overflow.
        }
        @accordionitem.Show(accordionitem.AccordionItemProps{
            ElementProps: base.ElementProps{
                Id: "collapseTwo",
            },
            Title: "Accordion Item #2",
            ParentIdSelector: "#ExampleAccordion",
            IsCollapsed: true,
        }) {
            <strong>This is the second item's accordion body.</strong>
            It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. 
            These classes control the overall appearance, as well as the showing and hiding via CSS transitions. 
            You can modify any of this with custom CSS or overriding our default variables. 
            It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, 
            though the transition does limit overflow.
        }
        @accordionitem.Show(accordionitem.AccordionItemProps{
            ElementProps: base.ElementProps{
                Id: "collapseThree",
            },
            Title: "Accordion Item #3",
            ParentIdSelector: "#ExampleAccordion",
            IsCollapsed: true,
        }) {
            <strong>This is the third item's accordion body.</strong>
            It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. 
            These classes control the overall appearance, as well as the showing and hiding via CSS transitions. 
            You can modify any of this with custom CSS or overriding our default variables. 
            It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, 
            though the transition does limit overflow.
        }
    }
    `)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `testsuite/components/example/accordion/accordion.templ`, Line: 72, Col: 5}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

func Show() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var6 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			templ_7745c5c3_Var7 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
				templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
				if !templ_7745c5c3_IsBuffer {
					templ_7745c5c3_Buffer = templ.GetBuffer()
					defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
				}
				templ_7745c5c3_Var8 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
					if !templ_7745c5c3_IsBuffer {
						templ_7745c5c3_Buffer = templ.GetBuffer()
						defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element.  These classes control the overall appearance, as well as the showing and hiding via CSS transitions.  You can modify any of this with custom CSS or overriding our default variables.  It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>,  though the transition does limit overflow.")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if !templ_7745c5c3_IsBuffer {
						_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
					}
					return templ_7745c5c3_Err
				})
				templ_7745c5c3_Err = accordionitem.Show(accordionitem.AccordionItemProps{
					ElementProps: base.ElementProps{
						Id: "collapseOne",
					},
					Title:            "Accordion Item #1",
					ParentIdSelector: "#ExampleAccordion",
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var8), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var9 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
					if !templ_7745c5c3_IsBuffer {
						templ_7745c5c3_Buffer = templ.GetBuffer()
						defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element.  These classes control the overall appearance, as well as the showing and hiding via CSS transitions.  You can modify any of this with custom CSS or overriding our default variables.  It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>,  though the transition does limit overflow.")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if !templ_7745c5c3_IsBuffer {
						_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
					}
					return templ_7745c5c3_Err
				})
				templ_7745c5c3_Err = accordionitem.Show(accordionitem.AccordionItemProps{
					ElementProps: base.ElementProps{
						Id: "collapseTwo",
					},
					Title:            "Accordion Item #2",
					ParentIdSelector: "#ExampleAccordion",
					IsCollapsed:      true,
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var9), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Var10 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
					if !templ_7745c5c3_IsBuffer {
						templ_7745c5c3_Buffer = templ.GetBuffer()
						defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element.  These classes control the overall appearance, as well as the showing and hiding via CSS transitions.  You can modify any of this with custom CSS or overriding our default variables.  It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>,  though the transition does limit overflow.")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if !templ_7745c5c3_IsBuffer {
						_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
					}
					return templ_7745c5c3_Err
				})
				templ_7745c5c3_Err = accordionitem.Show(accordionitem.AccordionItemProps{
					ElementProps: base.ElementProps{
						Id: "collapseThree",
					},
					Title:            "Accordion Item #3",
					ParentIdSelector: "#ExampleAccordion",
					IsCollapsed:      true,
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var10), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if !templ_7745c5c3_IsBuffer {
					_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
				}
				return templ_7745c5c3_Err
			})
			templ_7745c5c3_Err = accordion.Show(accordion.AccordionProps{
				ElementProps: base.ElementProps{
					Id: "ExampleAccordion",
				},
				IsFlush: false,
			}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var7), templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = example.Show(example.ExampleProps{
			Title:                 "Accordion",
			BootstrapReferenceURL: "https://getbootstrap.com/docs/5.3/components/accordion/",
			ImportCode:            ImportCode(),
			Code:                  Code(),
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
