// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.513
package htmxdemoform

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/components/alerts"
	"github.com/chrisbward/templstrap.io/pkg/forms/form"
	"github.com/chrisbward/templstrap.io/pkg/forms/formfield"
	"github.com/chrisbward/templstrap.io/pkg/forms/formlabel"
	"github.com/chrisbward/templstrap.io/pkg/forms/inputfield"
	"github.com/chrisbward/templstrap.io/testsuite/entities"
	"net/http"
)

type HTMXDemoFormProps struct {
	FormFields           map[string]*entities.FormField
	FormFieldOrder       []string
	IncorrectCredentials bool
}

func Show(props HTMXDemoFormProps) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
			if !templ_7745c5c3_IsBuffer {
				templ_7745c5c3_Buffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
			}
			if props.IncorrectCredentials {
				templ_7745c5c3_Var3 := templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
					templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
					if !templ_7745c5c3_IsBuffer {
						templ_7745c5c3_Buffer = templ.GetBuffer()
						defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<p>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Var4 := `Invalid username or password`
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var4)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p>")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					if !templ_7745c5c3_IsBuffer {
						_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
					}
					return templ_7745c5c3_Err
				})
				templ_7745c5c3_Err = alerts.Show(alerts.AlertProps{
					AlertType: alerts.WarningAlert,
					Heading:   "Invalid credentials",
				}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, formFieldSelector := range props.FormFieldOrder {
				templ_7745c5c3_Err = formfield.Show(formfield.FormFieldProps{
					FormElementProps: base.FormElementProps{
						ElementProps: base.ElementProps{
							AdditionalClasses: []string{"mb-3"},
						},
					},
					FloatingLabels: true,
					Label: formlabel.Show(formlabel.FormLabelProps{
						For:  props.FormFields[formFieldSelector].FieldName,
						Text: props.FormFields[formFieldSelector].FieldLabel,
					}),
					Field: inputfield.Show(inputfield.InputProps{
						FormElementProps: base.FormElementProps{
							ElementProps: base.ElementProps{
								Id: props.FormFields[formFieldSelector].FieldName,
							},
						},
						Value:                          props.FormFields[formFieldSelector].FieldValue,
						Placeholder:                    props.FormFields[formFieldSelector].FieldPlaceholder,
						Type:                           props.FormFields[formFieldSelector].FieldType,
						ValidationState:                props.FormFields[formFieldSelector].FieldValidationState,
						FieldValidationFeedbackMessage: props.FormFields[formFieldSelector].FieldValidationFeedbackMessage,
					}),
				}).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			if !templ_7745c5c3_IsBuffer {
				_, templ_7745c5c3_Err = io.Copy(templ_7745c5c3_W, templ_7745c5c3_Buffer)
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = form.Show(form.FormProps{
			Action: form.FormAction{
				Method: http.MethodPost,
				Action: "/htmx",
				Actions: form.FormActionsMap{
					form.PrimaryFormAction:   {Name: "Submit"},
					form.SecondaryFormAction: {Name: "Cancel"},
				},
			},
			FloatingLabels: true,
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
