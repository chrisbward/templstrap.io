package pagination

import (
	"github.com/chrisbward/templstrap.io/pkg/base"
	"strings"
	"fmt" 
	"github.com/chrisbward/templstrap.io/pkg/components/pagination/paginationitem"
)

const RootClassName = "pagination"

type AlignmentType string

const JustifyContentCenterAlignmentType AlignmentType = "justify-content-center"
const JustifyContentEndAlignmentType AlignmentType = "justify-content-end"

type PageConditions struct {
	CurrentPage int
	TotalPageCount int
	PageIsDisabledUnderCondition *func(pageNumber int) bool
}
func (pc *PageConditions) IsCurrentPage(pageNumber int) bool { 
	return pc.CurrentPage == pageNumber
}
func (pc *PageConditions) IsPageDisabled(pageNumber int) bool {
	if pc.PageIsDisabledUnderCondition == nil {
		return false
	}
	return (*pc.PageIsDisabledUnderCondition)(pageNumber)
}

func (pc *PageConditions) HasNextPage() bool {
	return pc.CurrentPage < pc.TotalPageCount 
}
type PreviousButtonOptions struct {
	ShouldPersist bool
	IsDisabled bool
}

type PaginationProps struct {
	base.ElementProps
	Alignment AlignmentType
	PageConditions PageConditions
	PreviousButtonOptions PreviousButtonOptions
}

func (pc *PaginationProps) IsPreviousButtonDisabled() bool { 
	return pc.PageConditions.CurrentPage == 1 || pc.PreviousButtonOptions.IsDisabled
}


func (pp PaginationProps) BuildClassName() (classes string) {
	classNames := []string{RootClassName} 

	classes = strings.Join(classNames, " ")

	return
}

templ Show(props PaginationProps) {
	<nav aria-label="Pagination">
		<ul class={ props.BuildClassName() }>
			if props.PreviousButtonOptions.ShouldPersist  {
				@paginationitem.Show(paginationitem.PaginationItemProps{
					ElementProps: base.ElementProps{
						IsDisabled: props.IsPreviousButtonDisabled(),
					},
					IsActive: false,
					AriaLabel: "Visit the previous page",
					TextValue: "Previous",
					BuiltURL: "#",
				})
			}
			for iLoopA := 1; iLoopA < props.PageConditions.TotalPageCount+1; iLoopA++ { 
				@paginationitem.Show(paginationitem.PaginationItemProps{
					ElementProps: base.ElementProps{
						IsDisabled: props.PageConditions.IsPageDisabled(iLoopA),
					},
					IsActive: props.PageConditions.IsCurrentPage(iLoopA),
					AriaLabel: fmt.Sprintf("Go to page %d", iLoopA),
					TextValue: fmt.Sprintf("%d", iLoopA),
					BuiltURL: "#",
				})
			}
			if props.PageConditions.HasNextPage() {
				@paginationitem.Show(paginationitem.PaginationItemProps{
					IsActive: false,
					AriaLabel: "Visit the next page",
					TextValue: "Next",
					BuiltURL: "#",
				})
			}
		</ul>
	</nav>
}
