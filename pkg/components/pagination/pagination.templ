package pagination

import (
	"github.com/chrisbward/templstrap.io/pkg/base"
	"strings"
	"fmt" 
	"github.com/chrisbward/templstrap.io/pkg/components/pagination/paginationitem"
)

const RootClassName = "pagination"

type AlignmentType string

const JustifyContentCenterAlignmentType AlignmentType = "justify-content-center"
const JustifyContentEndAlignmentType AlignmentType = "justify-content-end"

type PageConditions struct {
	CurrentPage int
	TotalPageCount int
	PageIsDisabledUnderCondition *func(pageNumber int) bool
}
func (pc *PageConditions) IsCurrentPage(pageNumber int) bool { 
	return pc.CurrentPage == pageNumber
}
func (pc *PageConditions) IsPageDisabled(pageNumber int) bool {
	if pc.PageIsDisabledUnderCondition == nil {
		return false
	}
	return (*pc.PageIsDisabledUnderCondition)(pageNumber)
}

func (pc *PageConditions) HasNextPage() bool {
	return pc.CurrentPage < pc.TotalPageCount 
}
type PaginationButtonOptions struct {
	ShouldPersist bool
	IsDisabled bool
	Content string
}

type PaginationItemsProps struct {
	base.ElementProps
	// HTMXAttributes *base.HTMXProps
}

type PaginationContolsOptions struct {
	IsPreviousButton bool
	IsNextButton bool
	PreviousButtonOptions PaginationButtonOptions
	NextButtonOptions PaginationButtonOptions
}

func (pco PaginationContolsOptions) GetPreviousButtonContent() string {

	if pco.PreviousButtonOptions.Content == "" {
		return "Previous"
	}
	return pco.PreviousButtonOptions.Content
}

func (pco PaginationContolsOptions) GetNextButtonContent() string {

	if pco.NextButtonOptions.Content == "" {
		return "Next"
	}
	return pco.NextButtonOptions.Content
}

type PaginationProps struct {
	base.ElementProps
	RootURL string
	RootResultsURL string
	Alignment AlignmentType
	PageConditions PageConditions
	PaginationContolsOptions PaginationContolsOptions
	PaginationItemsProps PaginationItemsProps
	BuildURLCallback *func(desiredPage int) string
}

type PaginationPageReferenceType int

var (
	PreviousPagePaginationPageReferenceType = -1
	NextPagePaginationPageReferenceType = 0
)

// ReconstructURL - useful for rebuilding querystrings via model
func (pp *PaginationProps) ReconstructURL(desiredPageNumber int) string {
	if desiredPageNumber == PreviousPagePaginationPageReferenceType {
		desiredPageNumber = pp.PageConditions.CurrentPage - 1
	}
	if desiredPageNumber == NextPagePaginationPageReferenceType {
		desiredPageNumber = pp.PageConditions.CurrentPage + 1
	}
	if pp.BuildURLCallback == nil {
		return fmt.Sprintf("%s?pagination=true&page=%d", pp.RootURL, desiredPageNumber)
	}
	return pp.RootURL + (*pp.BuildURLCallback)(desiredPageNumber)
}

func (pc *PaginationProps) IsPreviousButtonDisabled() bool { 
	return pc.PageConditions.CurrentPage == 1 || pc.PaginationContolsOptions.PreviousButtonOptions.IsDisabled
}


func (pp PaginationProps) BuildClassName() (classes string) {
	classNames := []string{RootClassName} 

    if pp.AdditionalClasses != nil {
		classNames = append(classNames, pp.AdditionalClasses...)
	}

	classes = strings.Join(classNames, " ")

	return
}

func (pp PaginationProps) GetElementPropsForItem(pageNumber int) base.ElementProps {

	elementProps := pp.PaginationItemsProps.ElementProps


	if pageNumber == PreviousPagePaginationPageReferenceType {
		elementProps.IsDisabled = pp.IsPreviousButtonDisabled() 
	} else {
		elementProps.IsDisabled = pp.PageConditions.IsPageDisabled(pageNumber)
	}

	var newExtraAttributes map[string]any
	if pp.RootResultsURL != "" {
		newExtraAttributes := make(map[string]any, len(elementProps.ExtraAttributes))
		for k, v := range elementProps.ExtraAttributes {
			newExtraAttributes[k] = v
		}
		newExtraAttributes["hx-get"] = fmt.Sprintf("%s%s", pp.RootResultsURL, pp.ReconstructURL(pageNumber))
	}
 
	return base.ElementProps{
		ExtraAttributes: newExtraAttributes,
		HTMX: elementProps.HTMX,
		IsDisabled: elementProps.IsDisabled,
	}
}
 

templ Show(props PaginationProps) {
	<nav aria-label="Pagination">
		<ul class={ props.BuildClassName() }>
			if props.PaginationContolsOptions.PreviousButtonOptions.ShouldPersist  {
				@paginationitem.Show(paginationitem.PaginationItemProps{
					ElementProps: props.GetElementPropsForItem(PreviousPagePaginationPageReferenceType),
					// ElementProps: base.ElementProps{
					// 	IsDisabled: props.IsPreviousButtonDisabled(), 
					// },
					IsPreviousButton: true,
					IsActive: false,
					AriaLabel: "Visit the previous page",
					Content: props.PaginationContolsOptions.GetPreviousButtonContent(),
					BuiltURL: props.ReconstructURL(PreviousPagePaginationPageReferenceType),
				})
			}
			for iLoopA := 1; iLoopA < props.PageConditions.TotalPageCount+1; iLoopA++ { 
				@paginationitem.Show(paginationitem.PaginationItemProps{
					ElementProps: props.GetElementPropsForItem(iLoopA),
					IsActive: props.PageConditions.IsCurrentPage(iLoopA),
					AriaLabel: fmt.Sprintf("Go to page %d", iLoopA),
					Content: fmt.Sprintf("%d", iLoopA),
					BuiltURL: props.ReconstructURL(iLoopA),
				})
			}
			if props.PageConditions.HasNextPage() {
				@paginationitem.Show(paginationitem.PaginationItemProps{ 
					ElementProps: props.GetElementPropsForItem(NextPagePaginationPageReferenceType),
					IsNextButton: true,
					IsActive: false,
					AriaLabel: "Visit the next page",
					Content: props.PaginationContolsOptions.GetNextButtonContent(),
					BuiltURL: props.ReconstructURL(NextPagePaginationPageReferenceType),
				})
			}
		</ul>
	</nav>
}
