package blockquote

import (
	"fmt"
	"strings"
)

type BlockCitationSource struct {
	Title string
	Hyperlink templ.SafeURL
}
type BlockQuoteCitation struct {
	CitationFormatting string
	Citations []*BlockCitationSource
}

type BlockQuoteProps struct {
	Quote       string
	Citation  *BlockQuoteCitation
}
func (bqc *BlockQuoteCitation) String() (blockQuoteCitationTitle string) {

	var renderedBlockquoteCitations []string
	for _, citation := range bqc.Citations {
		var citationTitleRenderedContent string 

		if citation.Hyperlink != "" {
			citationTitleRenderedContent = fmt.Sprintf("<a href=\"%s\" target=\"_blank\">%s</a>", citation.Hyperlink, citation.Title )
		} else {
			citationTitleRenderedContent = citation.Title
		}

		renderedBlockquoteCitation := fmt.Sprintf("<cite title=\"%s\">%s</cite>", citation.Title, citationTitleRenderedContent )
		renderedBlockquoteCitations = append(renderedBlockquoteCitations, renderedBlockquoteCitation)
	}
	if bqc.CitationFormatting != "" {
		return fmt.Sprintf(bqc.CitationFormatting, strings.Join(renderedBlockquoteCitations, " "))
	}

	return
}


templ Show(props BlockQuoteProps) {
	if props.Citation != nil {
		<figure>
			<blockquote class="blockquote">
				<p>@templ.Raw(props.Quote)</p>
			</blockquote>
			<figcaption class="blockquote-footer">
				@templ.Raw(props.Citation.String())  
			</figcaption>
		</figure>
	} else {
		<blockquote class="blockquote">
			<p>{ props.Quote }</p>
		</blockquote>
	}
}
