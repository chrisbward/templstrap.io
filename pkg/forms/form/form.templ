package form

import (
	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/components/buttons"
	"strings"
)

type FormActionType string

const PrimaryFormAction FormActionType = "primaryFormAction"
const SecondaryFormAction FormActionType = "secondaryFormAction"

type FormActionItem struct {
	Name   string
	Text   string
	Action string
}

type FormActionsMap map[FormActionType]FormActionItem

type FormAction struct {
	Method  string
	Action  string
	Actions FormActionsMap
}

type FormProps struct {
	base.ElementProps
	Action         FormAction
	EncodingType   string
	FloatingLabels bool
	IsNested       bool
}

func (fp FormProps) Disable() {
}

func (fp FormProps) BuildClassNames() (classes string) {
	classNames := []string{}

	if fp.FloatingLabels {

		classNames = append(
			classNames,
			"form-floating",
		)
	}

	classNames = append(classNames, "needs-validation")

	classes = strings.Join(classNames, " ")

	return
}

templ Show(props FormProps) {
	if !props.IsNested {
		<form
			action={ templ.SafeURL(props.Action.Action) }
			method={ props.Action.Method }
			class={ props.BuildClassNames() }
			id={ props.ElementProps.Id }
			enctype={ props.EncodingType }
			if props.ElementProps.HTMX.Encoding != "" {
				hx-encoding={ props.ElementProps.HTMX.Encoding }
			}
			if props.ElementProps.HTMX.Verb == base.PostVerbType {
				hx-post={ props.Action.Action + "?requesttype=htmx" }
			}
			if props.ElementProps.HTMX.TargetSelector != "" {
				hx-target={ props.ElementProps.HTMX.TargetSelector }
			}
			if props.ElementProps.HTMX.IndicatorSelector != "" {
				hx-indicator={ props.ElementProps.HTMX.IndicatorSelector }
			}
			if props.ElementProps.HTMX.Swap != "" {
				hx-swap={ string(props.ElementProps.HTMX.Swap) }
			}
			if props.ElementProps.HTMX.Include != "" {
				hx-include={ props.ElementProps.HTMX.Include }
			}
		>
			{ children... }
			if props.Action.Actions[PrimaryFormAction].Name != "" {
				@buttons.Show(buttons.ButtonProps{
					ButtonClassType: buttons.PrimaryButton,
				}) {
					{ props.Action.Actions[PrimaryFormAction].Name }
				}
			}
		</form>
	} else {
		{ children... }
	}
}
