package inputfield

import (
	"fmt"
	"strings"
	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/forms/datalist"
	"github.com/chrisbward/templstrap.io/testsuite/entities"
)

const RootClassName = "form-control"

type SizeType string

const Small SizeType = "sm"
const Large SizeType = "lg"


// type ValidationStateType string

// const IsInvalidType ValidationStateType = "is-invalid"
// const IsValidType ValidationStateType = "is-valid"

type InputProps struct {
	base.FormElementProps
	Value                          string
	Placeholder                    string
	Type                           entities.InputType
	Size                           SizeType
	ValidationState                entities.ValidationStateType
	FieldValidationFeedbackMessage string
	DatalistItems                  []string
}

func (ip InputProps) GetInputType() (inputType entities.InputType) {
	if ip.Type == "" {
		return entities.TextType
	}
	return ip.Type
}

func (ip InputProps) BuildClassNames() (classes string) {
	classNames := []string{RootClassName}

	classNames = append(
		classNames, fmt.Sprintf("%s-%s", RootClassName, string(ip.GetInputType())),
	)

	if ip.ValidationState == entities.FieldIsInvalidValidationStatusType {
		classNames = append(classNames, string(entities.FieldIsInvalidValidationStatusType))
	}
	if ip.ValidationState == entities.FieldIsValidValidationStatusType {
		classNames = append(classNames, string(entities.FieldIsValidValidationStatusType))
	}

	classes = strings.Join(classNames, " ")

	return
}

templ Show(props InputProps) {
	<input
		type={ string(props.GetInputType()) }
		class={ props.BuildClassNames() }
		value={ props.Value }
		id={ props.Id }
		name={ props.Id }
		placeholder={ props.Placeholder }
		readonly?={ props.IsReadOnly }
		disabled?={ props.IsDisabled }
	/>
	if props.GetInputType() == entities.DatalistType {
		@datalist.Show(datalist.DatalistProps{
            Items: props.DatalistItems,
        })
	}
	if props.ValidationState == entities.FieldIsInvalidValidationStatusType {
		<div class="invalid-feedback">
			{ props.FieldValidationFeedbackMessage }
		</div>
	}
	if props.ValidationState == entities.FieldIsValidValidationStatusType {
		<div class="valid-feedback">
			{ props.FieldValidationFeedbackMessage }
		</div>
	}
}
