package datalist 

import (
    "fmt"
    "strings"
	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/forms/inputfield"
	"github.com/chrisbward/templstrap.io/testsuite/entities"
)

const RootClassName = "form-control"


type DatalistProps struct {
	base.FormElementProps
    Value                          string
	Placeholder                    string
	Type                           entities.FormFieldType
	Size                           inputfield.SizeType
	FieldValidationFeedbackMessage string
	Validation                     entities.FormFieldValidation
	ExtraAttributes                map[string]any
	Items                          []base.FormListProps 
}
 func (dlp DatalistProps) GetInputType() (inputType entities.FormFieldType) {
	if dlp.Type.InputType == "" {
		return entities.FormFieldType{
			InputType: entities.TextType,
		}
	}
	return dlp.Type
}
 
func (dlp DatalistProps) BuildClassNames() (classes string) {
	classNames := []string{RootClassName}

	classNames = append(
		classNames, fmt.Sprintf("%s-%s", RootClassName, string(dlp.GetInputType().InputType)),
	)

	if dlp.Validation.ValidationState == entities.FieldIsInvalidValidationStatusType {
		classNames = append(classNames, string(entities.FieldIsInvalidValidationStatusType))
	}
	if dlp.Validation.ValidationState == entities.FieldIsValidValidationStatusType {
		classNames = append(classNames, string(entities.FieldIsValidValidationStatusType))
	}

	classes = strings.Join(classNames, " ")

	return
}
templ Show(props DatalistProps) {
    <input
		type={ string(props.GetInputType().InputType) }
		class={ props.BuildClassNames() }
		value={ props.Value }
		id={ props.Id }
		name={ props.Id }
		placeholder={ props.Placeholder }
		readonly?={ props.IsReadOnly }
		disabled?={ props.IsDisabled }
		required?={ props.Validation.IsRequired }
		{ props.ExtraAttributes... }
		{ props.HTMX.GetAttributes()... }
	/>
	<datalist
		id={ props.Id }
		name={ props.Id }
		placeholder={ props.Placeholder }
		readonly?={ props.IsReadOnly }
		disabled?={ props.IsDisabled }
		required?={ props.Validation.IsRequired }
	>
		for _, datalistItem := range props.Items {
			<option value={ datalistItem.Text }></option>
		}
	</datalist>
}
