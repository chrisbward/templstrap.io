package selectx

import (
	"fmt"
	"github.com/chrisbward/templstrap.io/pkg/base"
	"github.com/chrisbward/templstrap.io/pkg/forms/select/selectoption"
	"github.com/chrisbward/templstrap.io/testsuite/entities"
	"strings"
)

const RootClassName = "form-select"

type SizingType string

const Default SizingType = ""
const Small SizingType = "sm"
const Large SizingType = "lg"

type SelectMultipleProps struct {
	IsMultipleChoice bool
	Rows             int
}

type SelectProps struct {
	base.FormElementProps
	Size              SizingType
	SelectAnItemCue   string
	SelectedItemValue string
	Options           []*selectoption.SelectOptionProps
	Validation        entities.FormFieldValidation
	MutipleProps      SelectMultipleProps
}

func (sp SelectProps) BuildClassNames() (classes string) {
	classNames := []string{RootClassName}

	if sp.Size != "" {
		classNames = append(
			classNames, fmt.Sprintf("%s-%s", RootClassName, string(sp.Size)),
		)
	}

	classes = strings.Join(classNames, " ")

	return
}

func SelectOptions(options []*selectoption.SelectOptionProps, selectedItemValue string) []*selectoption.SelectOptionProps {
	if selectedItemValue == "" {
		return options
	}

	for _, option := range options {
		if selectedItemValue == option.Value {
			option.IsSelected = true
		}
	}

	return options
}

templ Show(props SelectProps) {
	<select
		class={ props.BuildClassNames() }
		aria-label={ props.AriaLabel }
		disabled?={ props.IsDisabled }
		required?={ props.Validation.IsRequired }
		multiple?={ props.MutipleProps.IsMultipleChoice }
		rows={ fmt.Sprint(props.MutipleProps.Rows) }
		id={ props.Id }
		name={ props.Id }
	>
		if props.SelectAnItemCue != "" {
			<option value="" disabled required>{ props.SelectAnItemCue }</option>
		}
		if len(SelectOptions(props.Options, props.SelectedItemValue)) > 0 {
			for _, selectOptionProps := range SelectOptions(props.Options, props.SelectedItemValue) {
				@selectoption.Show(*selectOptionProps)
			}
		}
		{ children... }
	</select>
}
